Загрузка карточек.
Общая схема работы скрипта заключается в следующем. Есть БД с 
информацией о товарах. Несколько категорий товаров. Необходимо 
собирать из нескольких jsonтекстовую информацию о товарах, 
собирать фотографии для товара (из разных таблиц БД) и  в указанном
порядке прикреплять их к карточке товара. Накладывать на набор фото
текстовую информацию(инфографику) и загружать товар на 
маркетплейс.
Все товары обединены в группы по характеристикам: тип товара + 
тематика. Такие товары загружаются вместе(одним json) и имеют 
одинаковые характеристики. 
После загрузки товаров на маркетплейс, необходимо сделать записи
об товаре в БД.

Далее - детальное ТЗ с привязкой к БД, тестовым примерам и базовым
карточкам на wb.

В настоящее время работает загрузка карточек для товаров типа 
блокноты(в БД таблица product_type.class=notepad). Каждый блокнот 
имеет несколько подвидов (в БД product_type.variety), в линейку, 
в точку, скетчбук и тд. Вот примеры карточек товара для тематики 
dogs (блокноты с собаками) .

Товары загружаются группами, группы берутся из таблицы 
product_group. 
Товары объединяются по принципу: одного типа и одной тематики
(subject). Такие товары, из одной группы, имеют одинаковое 
описание и характеристики. Сами товары перечислены в таблице 
product.

Схема работы скрипта.

1. Проходим по таблице wb_cards_uploaded. Там находится информация
о product_group, которые загружены(не загружены) на маркетплейсы.
Берём те, что не загружены на wb(поле wb_cards_uploaded.wb=false). 
Пример: product_group=testsubj_notepad_line

Для каждой такой product_group формируем json для загрузки 
следующим образом.
2. Текстовые поля.
2.1. Базовая карточка.
Для указанного в product_group.product_type - типа товара, берём 
базовую карточку из таблицы wb_base_card(поле path_base_json). 
При отсутствии этого json в БД, необходимо загрузить этот json с wb, 
используя barcode. В такой базовой карточке проставлены все 
характеристики товара данного типа. Такую карточку(данный json)
предлагается использовать как основу для формирования json 
загружаемого товара.
Пример: wb_base_card.path_base_json=base_notepad_line.json

2.2. Файл с полями для вставки.
Аналогично пункту 2.1. из таблицы wb_base_card взять 
path_insert_json . В этом json указаны поля карточки, в которые
необходимо вставить ключевые слова(key_0,key_1,...) связанные с 
картинкой на товаре. Например, такие поля как наименование, 
описание, рисунок,и тд.
Пример: wb_base_card.path_insert_json=insert_notepad_line.json

2.3. Ключевые слова. 
В текущей product_group есть поле subject. Оно отражает, что 
изображено на принте товара(тематика). Для указанного 
product_group.subject переходим в subject.template таблицы subject
и берём template.path_json из таблицы template. В указанном json
из таблицы template находятся ключевые слова(key_0, key_1,...).
Эти ключевые слова будут вставляться в файл "insert_...json" из
пункта 2.2.
Пример: template.path_json=testsubj.json

2.4. Формирование текста в итоговом json для заливки.
После сбора указанных в пунктах 2.1-3 файлов, необходимо:
2.4.1. Подставить значения key_0, key_1, key_2... из файла 
template.path_json в wb_base_card.path_insert_json.
2.4.2. Заменить поля в базовом файле wb_base_card.path_base_json 
на поля перечисленные в "insert_...json" файле после подстановки
key_0, key_1 и т.д.

На этом формирование текстовой информации в загружаемый на wb 
json закончено. Данный json соотвествует текущему product_group.
В этот json добавляются все товары из таблицы product для этой
product_group.


3. Формирование списка фотографий товаров.
Для текущего product_group в таблице product перечислены товары 
относящиеся к данной группе. При загрузке на wb эти товары будут
иметь одинаковые характеристики и описание и должны быть объединены
как цвета. Пример как должны выглядеть карточки:
https://www.wildberries.ru/catalog/62786966/detail.aspx? 
:)

В загружаемый json необходимо внести все товары отнсящиеся к 
текущей product_group. У каждого свои фотографии, barcode, 
vendorcode(мб ещё какие-то пар-ры).  

Для каждого элемента из таблицы product, относящегося к текущей 
product_group, необходимо сформировать набор фотографий следующим
образом:

3.1. Взять фото из папки указанной в product.path_mockups. Файлы,
находящиеся в этой папке, заименованы 0.png, 1.png и тд(расширение 
может отличаться .jpg, .jpeg). Это первая часть фото для товара.
Забираем их в лексикографическом порядке.

3.2. Взять фото из таблицы common_photo из директории указанной в
common_photo.path_img_dir. Это вторая часть фото для товара. Они 
также забираются в лексикографическом порядке.

3.3. Взять фото из таблицы template_group из поля 
template_group.path_image. Это будет последнее для текущего товара.

Таким образом, сформирован набор изобр-й для одного товара. Фото
должны идти в порядке указанном в пунктах 3.1-3. 

Теперь на этот набор изобр-й необходимо наложить инфографики. 
3.4. Функция наложения находится в прикрепленном .py файле. 
Инфографики берутся из таблицы infographic. Файл 
infographic.path_ifogr1 наложить на первое,
infographic.path_ifogr2 наложить на второе,
infographic.path_ifogr3 наложить на третье фото из набора изобр-й
полученного в пунктах 3.1-3.

После наложения инфографики, фото готовы для загрузки на wb и 
прикрепления к карточке товара.


Далее, загружаем на wb фотографии для каждого товара из таблицы 
product данной product_group. После добавляем каждый товар из 
product в json и загруженные на wb изобр-я этого товара. 
Генерируем баркоды и прочую инфу для wb. Загружаем на wb.

В поле supplierVendorCode вносится название product_group. В поле
vendorCode тире и product.print_number (см. пример). 
Например, для subject=testsubj и product_type=notepad_line итоговый
артикул товара получается testsubj_notepad_line-4. 
Номер принта product.print_number=4 .

4. После успешной загрузки товаров на wb необходимо сделать запись
в таблице wildberries для каждого product. В качестве первичного
ключа используется баркод. В качестве article берется значение 
product.name. Или конкатенация полей из загружаемого json
supplierVendorCode и vendorCode.

5. После загрузки необходимо проставить цены, скидки и остатки в 
соответствии с default значениями таблицы wildberries.


Входные параметры.
На вход скрипт должен принимать конфиг(простого формата, в целом
на Ваше усмотрение, пример текущего конфига прикрепляю). Конфиг 
должен содержать путь к хранилищу storage, креды для подключения к
БД, ключ апи, путь к лог-файлу. Это минимальный набор, остальное 
по Вашему усмотрению.

Требование к коду.
-функциональный код, без ООП.
-без привязки к сложным структурам данных.
-без привязки к имеющемуся списку товаров, скрипт должен работать
после добавления новых типов товаров и значений в таблицы БД.
-параметризация функций и использование простых типов, чтобы можно
было использовать функции в других частях проекта.
-логирование в лог-файл, указанный в конфиге.
-работа скрипта на *nix системах.

К ТЗ прилагаются.
-файл создания БД: create.sql.
-файл наполнения БД: insert.sql.
-пример хранилища с файлами для тестирования: папка storage.
-примерное видение конфига: config.ini.
-то, как выглядит карточка с товарами сейчас:
mermaids8_line_notepad.json .
-ключ апи и доступ к личному кабинету(после согласования задачи).

Примечание. 
При загрузке товаров, у которых есть размеры(одежда),
необходимо оставлять размерную сетку как в базовой карточке для 
каждого товара в json. И генерировать новый barcode для каждого 
размера. 

В настоящий момент, мы храним json с товарами локально. Поэтому для
редактирования информации о товаре (цена, скидка, остатки и т.д.)
не загружаем json с wb. На Ваше усмотрение: можно сделать 
ещё одну таблицу с json для групп товаров, а можно каждый раз 
выгружать json с вб для проставления цены например. 
Также, если необходимо вносить какие либо правки в структуру 
таблиц wildberries и wb_base_card, вносите. Только просьба отписать
мне, что и для чего вносили. Для изменений в структуре остальных 
таблиц БД - по согласованию со мной.
Если необходимо можете вносить правки в json, для удобства парсинга,
просьба документировать или сообщать, что поменяли.

Все переменные path_... в таблицах БД(кроме author) являются 
относительными путями. Для формирования полного пути к файлу или 
директории необходимо джойнить path_... их с переменной storage 
из конфига.



Допускаю, что в ТЗ могут быть неточности или мелкие несостыковки с
примерами (всё-таки человеческий фактор и моё умение объясняться). 
По любым оперативным вопросам, а также если будут предложения по 
оптимизации задачи можете писать мне в тг @ctrlcvz - Константин.

